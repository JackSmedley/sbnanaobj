////////////////////////////////////////////////////////////////////////
// \file    SRTruthParticle.h
////////////////////////////////////////////////////////////////////////
#ifndef SRTRUTHPARTICLE_H
#define SRTRUTHPARTICLE_H

#include <cstdint>
#include <TVector3.h>

#include "SREnums.h"

/* #include "SRVector3D.h" */


namespace caf
{
  /// Representation of a simb::MCParticle, knows energy, direction, 
  // etc, but no hit information.
  class SRTruthParticle
    {
    public:

      float    startE;          //!< Energy at first point in the active TPC volume) [GeV]
      float    endE;            //!< Energy at last point in the active TPC volume) [GeV]
      float    deposited_energy; //!< Total energy deposited in active volume [GeV]
      float    start_time;//!< Start time of the particle (first point in the active TPC volume) [mus -- t=0 is spill time]
      float    end_time;  //!< End time of the particle (last point in the active TPC volume) [mus -- t=0 is spill time]

      float    length;     //!< Total trajectory length of particle contained in the active TPC volume [cm]

      TVector3 startp;          //!< Momentum at first point in the active TPC volume) [GeV/c]
      TVector3 endp;            //!< Momentum at last point in the active TPC volume) [GeV/c]
      TVector3 start;  //!< Start position of the particle (first point in the active TPC volume) [cm]
      TVector3 end;    //!< End position of the particle (last point in the active TPC volume) [cm] 

      Wall_t   wenter;     //!< Wall of cryostat particle enters (wNone if starting in detector)
      Wall_t   wexit;      //!< Wall of cryostat particle exits (wNone if stopping in detector)
      
      bool     contained_in_cryo; //!< Whether the particle is contained in a single cryostat
      bool     contained_in_tpc;  //!< Whether the particle is contained in a single TPC
      bool     crosses_tpc; //!< Whether the particle crosses a TPC boundary 
      bool     is_contained; //!< Whether the particle is contained in a single active volume
      bool     isPrimary;
      bool     hasBraggPeak;

      int      pdg;          //!< Particle ID code
      int      G4ID;         //!< ID of the particle (taken from G4 -- -1 if this particle is not propogated by genie)
      int      interaction_id; //!< Neutrino interaction ID of the source of this particle (-1 if cosmic)

      generator_    generator;

      g4_process_   start_process; //!< Start G4 process of the particle
      g4_process_   end_process; //!< End G4 process of the particle

      genie_status_ gstatus; //!< Status of the particle is generated by genie



      /// Whether this is a primary particle or generated by a secondary interaction
      bool IsPrimary() const;

      /// Whether this particle should have a bragg peak in the detector
      bool HasBraggPeak() const;

      /// Whether this particle was generated by genie (as opposed to geant or corsika)
      bool IsGenie() const;

      /// Whether this is a stable particle as generated by genie
      bool IsStable() const;


      SRTruthParticle();
      ~SRTruthParticle(){  };

    };

} // end namespace

#endif // SRTRUTHPARTICLE_H
//////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// \file    SRTrueParticle.h
////////////////////////////////////////////////////////////////////////
#ifndef SRTRUEPARTICLE_H
#define SRTRUEPARTICLE_H

#include <cstdint>
#include <TVector3.h>

#include "SREnums.h"

/* #include "SRVector3D.h" */


namespace caf
{
  /// Representation of a simb::MCParticle, knows energy, direction, 
  // etc, but no hit information.
  class SRTrueParticle
    {
    public:

      float    visE;        //!< Total energy deposited in active volume [GeV]
      float    startE;      //!< Energy at first pt in active TPC volume [GeV]
      float    endE;        //!< Energy at last pt in active TPC volume [GeV]
      float    startT;      //!< Start time of first TPC point [mus -- t=0 is spill time]
      float    endT;        //!< End time last point in the active [mus -- t=0 is spill time]
      float    length;      //!< Trajectory length in active TPC volume [cm]

      TVector3 startp;      //!< Momentum at first point in the active TPC volume [GeV/c]
      TVector3 endp;        //!< Momentum at last point in the active TPC volume [GeV/c]
      TVector3 start;       //!< Start position in the active TPC volume [cm]
      TVector3 end;         //!< End position in the active TPC volume [cm] 

      Wall_t   wallin;      //!< Wall of cryostat particle enters (wNone if starting in detector)
      Wall_t   wallout;     //!< Wall of cryostat particle exits (wNone if stopping in detector)
      
      bool     cont_cryo;   //!< Whether the particle is contained in a single cryostat
      bool     cont_tpc;    //!< Whether the particle is contained in a single TPC
      bool     crosses_tpc; //!< Whether the particle crosses a TPC boundary 
      bool     cont_onetpc; //!< Whether the particle is contained in a single active volume
      bool     isContained;
      bool     isPrimary;
      bool     hasBraggPeak;

      int      pdg;          //!< Particle ID code
      int      G4ID;         //!< ID of the particle (taken from G4 -- -1 if this particle is not propogated by genie)
      int      interaction_id; //!< Neutrino interaction ID of the source of this particle (-1 if cosmic)

      generator_    generator;

      g4_process_   start_process; //!< Start G4 process of the particle
      g4_process_   end_process; //!< End G4 process of the particle

      genie_status_ gstatus; //!< Status of the particle is generated by genie


      // TO DO: Move functions to FillVars

      /// Whether this is a primary particle or generated by a secondary interaction
      bool IsPrimary() const;

      /// Whether this particle should have a bragg peak in the detector
      bool HasBraggPeak() const;

      /// Whether this particle was generated by genie (as opposed to geant or corsika)
      bool IsGenie() const;

      /// Whether this is a stable particle as generated by genie
      bool IsStable() const;


      SRTrueParticle();
      ~SRTrueParticle(){  };

    };

} // end namespace

#endif // SRTRUEPARTICLE_H
//////////////////////////////////////////////////////////////////////////////
